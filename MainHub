local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera

local configFile = "voltex_config.json"

local function SaveConfig(settings)
    pcall(function()
        writefile(configFile, HttpService:JSONEncode(settings))
    end)
end

local function LoadConfig()
    if isfile(configFile) then
        local success, data = pcall(function() return HttpService:JSONDecode(readfile(configFile)) end)
        if success then
            return data
        else
            print("Error reading config file.")
            return {}
        end
    end
    return {}
end

local settings = LoadConfig()

local function UpdateSetting(key, value)
    settings[key] = value
    SaveConfig(settings)
end

local VLib = loadstring(game:HttpGet("https://pastebin.com/raw/Mb49kKTP"))()

MAINTTL = "Free Voltex Hub"

local win = VLib:Window("Universal", Color3.fromRGB(196, 40, 28), {
    Image = "rbxassetid://9478562327"
})

local homeTab = win:Tab("Home")
local mainTab = win:Tab("Main")
local supportedGamesTab = win:Tab("Supported Games")
local miscTab = win:Tab("Misc")
local clientTab = win:Tab("Client")
local uiSettingsTab = win:Tab("UI Settings")

homeTab:Label("Made By: Voltex")
homeTab:Button("Join Discord", function()
    setclipboard("https://discord.gg/9NMFBCq7")
    print("Discord link copied to clipboard!")
end)

uiSettingsTab:Button("Destroy Gui", function()
    game.CoreGui["Library"]:Destroy()
end)

-- Change UI Visibility to Toggle Button
local uiVisibilityButton = settings["UI_Visible"] or Enum.KeyCode.Unknown
uiSettingsTab:Dropdown("Choose Gui Toggle Button", {"Unknown", "F", "G", "H", "J", "K", "L", "M", "N", "O", "Quote"}, function(state)
    uiVisibilityButton = Enum.KeyCode[state]
    UpdateSetting("UI_Visible", uiVisibilityButton)
end, uiVisibilityButton.Name)

local aimbotEnabled = false
local espOpen = false
local povEnabled = false
local povCircle
local povSize = settings["POV_Size"] or 250  -- Increased POV size to 250
local isMobile = UserInputService.TouchEnabled -- Check if device is mobile
local isPC = not isMobile  -- Determine if it's a PC
local noRecoil = false -- Default recoil state
local aimingAtPlayer = nil  -- Track if we are locked onto a player

-- Function to create a bigger POV circle
local function CreatePOVCircle()
    if povCircle then povCircle:Remove() end
    povCircle = Drawing.new("Circle")
    povCircle.Color = Color3.fromRGB(255, 0, 0)
    povCircle.Thickness = 2
    povCircle.Radius = povSize  -- Use the updated size
    povCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    povCircle.Visible = povEnabled
end

mainTab:Button("Aimbot", function()
    aimbotEnabled = not aimbotEnabled
    espOpen = false
    UpdateSetting("Aimbot_Enabled", aimbotEnabled)
    UpdateSetting("ESP_Open", espOpen)
end)

mainTab:Toggle("Enable Aimbot", function(state)
    aimbotEnabled = state
    UpdateSetting("Aimbot_Enabled", state)
end, settings["Aimbot_Enabled"] or false)

mainTab:Toggle("Wall Check", function(state)
    UpdateSetting("WallCheck", state)
end, settings["WallCheck"] or false)

mainTab:Toggle("Highlight Target", function(state)
    UpdateSetting("HighlightTarget", state)
end, settings["HighlightTarget"] or false)

mainTab:Toggle("No-Recoil", function(state)
    noRecoil = state
    UpdateSetting("NoRecoil", state)
end, settings["NoRecoil"] or false)

mainTab:Slider("POV Size", 10, 400, povSize, function(value)
    povSize = value
    CreatePOVCircle()
    UpdateSetting("POV_Size", povSize)
end)

mainTab:Toggle("POV", function(state)
    povEnabled = state
    UpdateSetting("POV_Enabled", state)
    if povEnabled then
        CreatePOVCircle()
    else
        if povCircle then povCircle.Visible = false end
    end
end, settings["POV_Enabled"] or false)

mainTab:Toggle("Trigger Bot", function(state)
    UpdateSetting("TriggerBot_Enabled", state)
end, settings["TriggerBot_Enabled"] or false)

-- ESP Features
mainTab:Button("ESP", function()
    UpdateSetting("ESP_Enabled", not settings["ESP_Enabled"])
end)

mainTab:Toggle("ESP Names", function(state)
    UpdateSetting("ESP_Names", state)
end, settings["ESP_Names"] or false)

mainTab:Toggle("ESP Boxes", function(state)
    UpdateSetting("ESP_Boxes", state)
end, settings["ESP_Boxes"] or false)

mainTab:Toggle("ESP Health", function(state)
    UpdateSetting("ESP_Health", state)
end, settings["ESP_Health"] or false)

mainTab:Toggle("ESP Tracers", function(state)
    UpdateSetting("ESP_Tracers", state)
end, settings["ESP_Tracers"] or false)

-- Function to create ESP for player names visible through walls
local function CreateESP(player)
    local character = player.Character
    if not character or not player.Character:FindFirstChild("Head") then return end

    -- Create a BillboardGui to display the player's name above their head
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Parent = character.Head
    billboardGui.Adornee = character.Head
    billboardGui.Size = UDim2.new(0, 100, 0, 50)
    billboardGui.StudsOffset = Vector3.new(0, 2, 0)  -- Adjust the height above the player's head
    billboardGui.AlwaysOnTop = true

    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = billboardGui
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextStrokeTransparency = 0.8
    textLabel.Text = player.Name
    textLabel.TextScaled = true -- Ensure all names are the same size
    textLabel.TextStrokeTransparency = 0.5
end

-- Function to update ESP names
local function UpdateESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            if settings["ESP_Names"] then
                CreateESP(player)
            else
                if player.Character and player.Character:FindFirstChild("Head") then
                    -- If ESP is off, remove the BillboardGui
                    local billboardGui = player.Character.Head:FindFirstChildOfClass("BillboardGui")
                    if billboardGui then
                        billboardGui:Destroy()
                    end
                end
            end
        end
    end
end

-- Update ESP when players are loaded into the game
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        UpdateESP()
    end)
end)

-- Continuously check and update ESP for players
RunService.Heartbeat:Connect(function()
    if settings["ESP_Names"] then
        UpdateESP()
    end
end)

-- Function to get the closest player and prioritize locking onto the torso or HumanoidRootPart
local function GetClosestPlayer()
    local closestPlayer, minDistance = nil, math.huge
    local localPlayer = Players.LocalPlayer
    local character = localPlayer.Character
    if not character then return nil end

    local rootPart = character:FindFirstChild("Head")
    if not rootPart then return nil end

    local params = RaycastParams.new()
    params.FilterDescendantsInstances = {character}
    params.FilterType = Enum.RaycastFilterType.Exclude

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            local targetPart = player.Character:FindFirstChild("UpperTorso") or player.Character:FindFirstChild("HumanoidRootPart") -- Try to prioritize the torso
            if targetPart then
                local distance = (rootPart.Position - targetPart.Position).Magnitude
                if distance < minDistance then
                    if settings["WallCheck"] then
                        local ray = workspace:Raycast(Camera.CFrame.Position, (targetPart.Position - Camera.CFrame.Position).Unit * 1000, params)
                        if ray and ray.Instance and ray.Instance:IsDescendantOf(player.Character) then
                            closestPlayer = targetPart
                            minDistance = distance
                        end
                    else
                        closestPlayer = targetPart
                        minDistance = distance
                    end
                end
            end
        end
    end
    return closestPlayer
end

RunService.Heartbeat:Connect(function()
    if aimbotEnabled then
        local target = GetClosestPlayer()
        if target then
            local targetPosition = target.Position + Vector3.new(0, 2, 0) -- Aim higher on the torso
            
            -- For PC (Aimbot locks onto the nearest player you're looking at, without smooth aiming)
            if isPC then
                if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
                    aimingAtPlayer = target  -- Lock onto the target
                    local screenPos = Camera:WorldToScreenPoint(targetPosition)
                    local distance = (Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                    if distance <= povCircle.Radius then
                        Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
                    end
                elseif aimingAtPlayer then
                    -- Release the lock when right-click is released
                    aimingAtPlayer = nil
                end
            end

            -- For Mobile (Auto-lock onto nearest enemy with stronger aim assist)
            if isMobile then
                Camera.CFrame = Camera.CFrame:Lerp(CFrame.lookAt(Camera.CFrame.Position, targetPosition), 0.5) -- Easier, stronger aim assist
            end

            -- TriggerBot logic
            if settings["TriggerBot_Enabled"] then
                mouse1click() -- Trigger Bot logic
            end
        end
    end

    if povCircle then
        povCircle.Visible = povEnabled
    end
end)

-- Function to show or hide the UI based on the selected key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == uiVisibilityButton then
        if win.Visible then
            win.Visible = false
        else
            win.Visible = true
        end
    end
end)

-- Client Tab: Walk Speed Modifier
clientTab:TextBox("Walk Speed", "Enter a number to change walk speed", function(value)
    local speed = tonumber(value)
    if speed then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed
    end
end)

-- Client Tab: FOV Slider
clientTab:Slider("FOV", 70, 120, Camera.FieldOfView, function(value)
    Camera.FieldOfView = value
end)

-- Misc Tab: Add whatever miscellaneous functions here
miscTab:Label("Add your own custom scripts here")
