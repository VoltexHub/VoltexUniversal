local function main()

    local HttpService = game:GetService("HttpService")
    local UserInputService = game:GetService("UserInputService")
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local Camera = workspace.CurrentCamera

    local configFile = "voltex_config.json"

    -- Safe check if file exists
    local function FileExists(filename)
        local success, _ = pcall(readfile, filename)
        return success
    end

    -- Ensure config file exists
    local function EnsureConfigFile()
        if not FileExists(configFile) then
            writefile(configFile, HttpService:JSONEncode({})) -- Create empty config
        end
    end

    -- Save settings
    local function SaveConfig(settings)
        EnsureConfigFile()
        local success, err = pcall(function()
            writefile(configFile, HttpService:JSONEncode(settings))
        end)
        if not success then warn("Error saving config:", err) end
    end

    -- Load settings safely
    local function LoadConfig()
        EnsureConfigFile()
        local success, content = pcall(readfile, configFile)
        if success and content and content ~= "" then
            local successDecode, data = pcall(function() return HttpService:JSONDecode(content) end)
            if successDecode and type(data) == "table" then
                return data
            else
                warn("Error decoding config file! Resetting settings...")
                writefile(configFile, HttpService:JSONEncode({})) -- Reset file
            end
        end
        return {} -- Default empty settings
    end

    local settings = LoadConfig()

    local function UpdateSetting(key, value)
        settings[key] = value
        SaveConfig(settings)
    end

    local VLib = loadstring(game:HttpGet("https://pastebin.com/raw/H29ijSYE"))() -- Correct pastebin link for the UI library

    MAINTTL = "Free Voltex Hub"

    local win = VLib:Window("Universal", Color3.fromRGB(196, 40, 28), {})

    -- Tabs
    local homeTab = win:Tab("Home")
    local mainTab = win:Tab("Main")
    local supportedGamesTab = win:Tab("Supported Games")
    local miscTab = win:Tab("Misc")
    local clientTab = win:Tab("Client")
    local uiSettingsTab = win:Tab("UI Settings")

    -- Home Tab
    homeTab:Label("Made By: Voltex")
    homeTab:Button("Join Discord", function()
        setclipboard("https://discord.gg/9NMFBCq7")
    end)

    -- UI Settings Tab
    uiSettingsTab:Button("Destroy Gui", function()
        game.CoreGui["Library"]:Destroy()
    end)

    local uiVisibilityButton = settings["UI_Visible"] or Enum.KeyCode.Unknown
    uiSettingsTab:Dropdown("Choose Gui Toggle Button", {"Unknown", "F", "G", "H", "J", "K", "L", "M", "N", "O", "Quote"}, function(state)
        uiVisibilityButton = Enum.KeyCode[state]
        UpdateSetting("UI_Visible", uiVisibilityButton)
    end, uiVisibilityButton.Name)

    -- Main Tab Features
    local aimbotEnabled = settings["Aimbot_Enabled"] or false
    local povEnabled = settings["POV_Enabled"] or false
    local povSize = settings["POV_Size"] or 250
    local noRecoil = settings["NoRecoil"] or false
    local walkSpeed = settings["WalkSpeed"] or 16
    local jumpHeight = settings["JumpHeight"] or 50
    local noClip = settings["NoClip"] or false
    local godMode = settings["GodMode"] or false
    local fly = settings["Fly"] or false
    local bang = settings["Bang"] or false

    mainTab:Toggle("Enable Aimbot", function(state)
        aimbotEnabled = state
        UpdateSetting("Aimbot_Enabled", state)
    end, aimbotEnabled)

    mainTab:Toggle("Wall Check", function(state)
        UpdateSetting("WallCheck", state)
    end, settings["WallCheck"] or false)

    mainTab:Toggle("Highlight Target", function(state)
        UpdateSetting("HighlightTarget", state)
    end, settings["HighlightTarget"] or false)

    mainTab:Toggle("No-Recoil", function(state)
        noRecoil = state
        UpdateSetting("NoRecoil", state)
    end, noRecoil)

    mainTab:Toggle("POV", function(state)
        povEnabled = state
        UpdateSetting("POV_Enabled", state)
    end, povEnabled)

    mainTab:Slider("POV Size", 10, 400, povSize, function(value)
        povSize = value
        UpdateSetting("POV_Size", povSize)
    end)

    -- ESP Features
    mainTab:Toggle("ESP Names", function(state)
        UpdateSetting("ESP_Names", state)
    end, settings["ESP_Names"] or false)

    mainTab:Toggle("ESP Boxes", function(state)
        UpdateSetting("ESP_Boxes", state)
    end, settings["ESP_Boxes"] or false)

    mainTab:Toggle("ESP Health", function(state)
        UpdateSetting("ESP_Health", state)
    end, settings["ESP_Health"] or false)

    mainTab:Toggle("ESP Tracers", function(state)
        UpdateSetting("ESP_Tracers", state)
    end, settings["ESP_Tracers"] or false)

    -- Misc Tab Features
    miscTab:Toggle("Fly", function(state)
        fly = state
        UpdateSetting("Fly", state)
        -- Fly logic here (if any)
    end, fly)

    miscTab:Toggle("Bang", function(state)
        bang = state
        UpdateSetting("Bang", state)
        -- Bang logic here (e.g., explosions)
    end, bang)

    -- Client Tab Features
    clientTab:Slider("Jump Height", 50, 300, jumpHeight, function(value)
        game.Players.LocalPlayer.Character.Humanoid.JumpHeight = value
        UpdateSetting("JumpHeight", value)
    end)

    clientTab:Slider("Walk Speed", 10, 200, walkSpeed, function(value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
        UpdateSetting("WalkSpeed", value)
    end)

    clientTab:Toggle("No-Clip", function(state)
        noClip = state
        UpdateSetting("NoClip", state)
        -- No-clip logic here (if any)
    end, noClip)

    clientTab:Toggle("God Mode", function(state)
        godMode = state
        UpdateSetting("GodMode", state)
        -- God Mode logic (e.g., make player invincible)
        local player = game.Players.LocalPlayer
        if player and player.Character then
            if state then
                player.Character.Humanoid.Health = math.huge -- God mode (invincible)
            else
                -- Turn off God Mode (restore default health)
                player.Character.Humanoid.Health = player.Character.Humanoid.MaxHealth
            end
        end
    end, godMode)

    -- AIMBOT IMPLEMENTATION
    local function isPlayerVisible(targetPlayer)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
            local cameraPosition = Camera.CFrame.Position
            local ray = Ray.new(cameraPosition, (targetPosition - cameraPosition).unit * (targetPosition - cameraPosition).Magnitude)
            local hitPart = workspace:FindPartOnRay(ray, game.Players.LocalPlayer.Character, false, true)
            return not hitPart or hitPart.Parent == targetPlayer.Character
        end
        return false
    end

    local function getClosestPlayer()
        local closestPlayer = nil
        local closestDistance = povSize
        local cameraPosition = Camera.CFrame.Position
        local cameraLookDirection = Camera.CFrame.LookVector

        for _, targetPlayer in ipairs(Players:GetPlayers()) do
            if targetPlayer ~= game.Players.LocalPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = targetPlayer.Character.HumanoidRootPart
                local screenPoint = Camera:WorldToViewportPoint(rootPart.Position)
                local mousePosition = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                local distance = (mousePosition - Vector2.new(screenPoint.X, screenPoint.Y)).Magnitude
                local directionToPlayer = (rootPart.Position - cameraPosition).unit
                local dotProduct = cameraLookDirection:Dot(directionToPlayer)

                if distance <= povSize and dotProduct > 0 then
                    if not settings["WallCheck"] or isPlayerVisible(targetPlayer) then
                        if not closestPlayer or distance < closestDistance then
                            closestPlayer = targetPlayer
                            closestDistance = distance
                        end
                    end
                end
            end
        end
        return closestPlayer
    end

    -- ESP DRAWING
    local function drawESP(targetPlayer)
        if targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = targetPlayer.Character.HumanoidRootPart
            local screenPosition, onScreen = Camera:WorldToViewportPoint(rootPart.Position)

            if onScreen then
                if settings["ESP_Boxes"] then
                    local box = Instance.new("Frame")
                    box.Size = UDim2.new(0, 100, 0, 200)
                    box.Position = UDim2.new(0, screenPosition.X - 50, 0, screenPosition.Y - 100)
                    box.BorderSizePixel = 1
                    box.BorderColor3 = Color3.fromRGB(255, 0, 0)
                    box.BackgroundTransparency = 1
                    box.Parent = game.CoreGui
                end
                if settings["ESP_Names"] then
                    local nameLabel = Instance.new("TextLabel")
                    nameLabel.Text = targetPlayer.Name
                    nameLabel.Position = UDim2.new(0, screenPosition.X - 50, 0, screenPosition.Y - 120)
                    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    nameLabel.BackgroundTransparency = 1
                    nameLabel.TextSize = 14
                    nameLabel.Parent = game.CoreGui
                end
            end
        end
    end

    RunService.RenderStepped:Connect(function()
        for _, targetPlayer in ipairs(Players:GetPlayers()) do
            if targetPlayer ~= game.Players.LocalPlayer then
                drawESP(targetPlayer)
            end
        end
    end)

    RunService.RenderStepped:Connect(function()
        if aimbotEnabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
            local closestPlayer = getClosestPlayer()
            if closestPlayer then
                local rootPart = closestPlayer.Character.HumanoidRootPart
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, rootPart.Position)
            end
        end
    end)

    print("✅")
end

main()
